import cv2
import numpy as np
from hailo_platform import pcie
from hailo_model_zoo.core.infer import infer_from_model_zoo
from hailo_model_zoo.utils.image_utils import preprocess_image
import yaml
import time

# --- [1] โหลดค่า Camera Calibration (ถ้ามี) ---
def load_calibration(path="calibration.yaml"):
    with open(path, 'r') as file:
        calib_data = yaml.safe_load(file)
    camera_matrix = np.array(calib_data['camera_matrix'])
    dist_coeffs = np.array(calib_data['dist_coeff'])
    return camera_matrix, dist_coeffs

# โหลด calibration หรือใช้ค่าดีฟอลต์ถ้าไม่มีไฟล์
try:
    camera_matrix, dist_coeffs = load_calibration()
    use_calibration = True
except:
    print("[INFO] Calibration file not found. Skipping undistortion.")
    use_calibration = False
    camera_matrix, dist_coeffs = None, None

def correct_rotation_and_undistort(image):
    if not use_calibration:
        return image
    h, w = image.shape[:2]
    new_cam_matrix, _ = cv2.getOptimalNewCameraMatrix(camera_matrix, dist_coeffs, (w, h), 1)
    corrected = cv2.undistort(image, camera_matrix, dist_coeffs, None, new_cam_matrix)
    return corrected

def find_angle(x1, y1, x2, y2):
    if y1 == 0:
        return None
    try:
        theta = np.arccos((y2 - y1) * (-y1) / (np.sqrt((x2 - x1)**2 + (y2 - y1)**2) * y1))
        return np.degrees(theta)
    except:
        return None

# --- [2] Setup YOLO Hailo Infer ---
model_name = "yolov8m_coco_hailo"  # ตรวจสอบว่าโมเดลถูกติดตั้งใน Hailo Model Zoo แล้ว
pcie.configure()
yolo_runner = infer_from_model_zoo(model_name)

# --- [3] เปิดกล้องผ่าน OpenCV หรืออ่านวิดีโอ ---
cap = cv2.VideoCapture(0)  # หรือใส่ path วิดีโอ เช่น "test.mp4"

if not cap.isOpened():
    print("Error: Cannot open camera/video.")
    exit()

# --- [4] Loop ตรวจจับท่าทาง ---
good_frames = 0
bad_frames = 0
fps = 10
font = cv2.FONT_HERSHEY_SIMPLEX

while True:
    ret, frame = cap.read()
    if not ret:
        break

    frame = correct_rotation_and_undistort(frame)
    detections = yolo_runner.infer(frame.copy())

    for det in detections:
        if det.label == 'person':
            x1, y1, x2, y2 = map(int, det.bbox)
            if y1 == 0:
                cv2.putText(frame, "Warning: y1 = 0, skipping...", (20, 40), font, 0.8, (0, 0, 255), 2)
                continue

            center_x = x1 + (x2 - x1) // 2
            shoulder_y = y1 + int((y2 - y1) * 0.25)
            ear_y = y1
            hip_y = y1 + int((y2 - y1) * 0.75)

            neck_angle = find_angle(center_x, shoulder_y, center_x, ear_y)
            torso_angle = find_angle(center_x, hip_y, center_x, shoulder_y)

            if neck_angle is None or torso_angle is None:
                cv2.putText(frame, "Calculating...", (20, 40), font, 0.8, (255, 255, 0), 2)
                continue

            if neck_angle < 40 and torso_angle < 10:
                good_frames += 1
                bad_frames = 0
                color = (0, 255, 0)
                text = "Good Posture"
            else:
                good_frames = 0
                bad_frames += 1
                color = (0, 0, 255)
                text = "Bad Posture"

            cv2.rectangle(frame, (x1, y1), (x2, y2), color, 2)
            cv2.putText(frame, f"{text} N:{int(neck_angle)} T:{int(torso_angle)}", (x1, y1 - 10), font, 0.7, color, 2)

            bad_time = bad_frames / fps
            if bad_time > 180:
                cv2.putText(frame, "WARNING: BAD POSTURE > 180s!", (20, 460), font, 0.8, (0, 0, 255), 2)

    cv2.imshow("YOLO Posture Detection", frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
